<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <groupId>org.ashok</groupId>
  <artifactId>simple-spring-webapp</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  <packaging>jar</packaging>
  
  <properties>
	  <maven.compiler.source>17</maven.compiler.source>
	  <maven.compiler.target>17</maven.compiler.target>
	  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  
  <dependencies>
	  <!--embedded tomcat container-->
	  <dependency>
		  <groupId>org.apache.tomcat.embed</groupId>
		  <artifactId>tomcat-embed-core</artifactId>
		  <version>9.0.54</version>
	  </dependency>
	  
	  <dependency>
        <groupId>javax.annotation</groupId>
        <artifactId>javax.annotation-api</artifactId>
        <version>1.3.2</version>
      </dependency>
      
       <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.13.0</version>
        </dependency>
                
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <version>2.13.0</version>
        </dependency>
        
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.3.10</version>
        </dependency>
        
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.3.10</version>
        </dependency>
        
		<dependency>
		    <groupId>org.springframework.data</groupId>
		    <artifactId>spring-data-jpa</artifactId>
		    <version>2.5.5</version>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-orm</artifactId>
		    <version>5.3.10</version>
		</dependency>
        
        <dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-entitymanager</artifactId>
		    <version>5.6.15.Final</version>
		</dependency>
		
		<dependency>
		    <groupId>org.eclipse.persistence</groupId>
		    <artifactId>javax.persistence</artifactId>
		    <version>2.2.0</version>
		</dependency>

        
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.3.10</version>
        </dependency>
        
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>6.2.0.Final</version>
        </dependency>
        
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.el</artifactId>
            <version>3.0.1-b12</version>
        </dependency>
        
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring5</artifactId> <!-- 1 -->
            <version>3.0.12.RELEASE</version>
        </dependency>
        
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.200</version>
        </dependency>
        
        <dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.18.26</version>
		    <scope>provided</scope>
		</dependency>
	
	<!-- Spring security dependencies -->
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-core</artifactId>
		    <version>5.5.2</version>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-web</artifactId>
		    <version>5.5.2</version>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-config</artifactId>
		    <version>5.5.2</version>
		</dependency>
		
		<!-- xtml to pdf converter -->
		<dependency>
		    <groupId>org.xhtmlrenderer</groupId>
		    <artifactId>flying-saucer-pdf</artifactId>
		    <version>9.1.22</version>
		</dependency>
		
		<!-- html to xhtml converter-->	
		<dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.13.1</version>
        </dependency>
				
			        	  
  </dependencies>
  
  <build>
	  
	<plugins>
		
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.8.1</version>
			
		</plugin>
		  
	
	<!-- Maven JAR plugin -
	  Maven Jar plugin is responsible for configuring where the project's main class is so it can add it to the Jar's manifest file
	  That way when you run the jar file, it will execute the main class registered in manifest file.
	  -->
	<!--    <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<version>3.3.0</version>
			
			<configuration>
				<archive>
					
					<manifest>
						<mainClass>org.ashok.launcher.AppLauncher</mainClass>
					</manifest>
				</archive>
			</configuration>
		</plugin>
	-->
	  
	 <!-- Maven shade plugin
	   The plugin provides the capability to package the artifact in an uber-jar, including its dependencies as a single jar
	   and to shade - i.e. rename the packages of some of the dependencies.
	   it is easy for execution, because you will need only one BIG JAR instead of tons of small Jars to run your App.
	   This plugin has a single goal: shade:shade and is bound to the package phase to create shaded jar
	   
	   The shade plugin will essentially unzip every 3rd party library and put it into your .jar file. 
	   If a third-party library comes with a manifest.mf file, thereâ€™s potentially n-manifest files 
	   going into your .jar file, overwriting each other.If you specify the main class here, the shade plugin 
	   will make sure that your final manifest file will have the correct class specified.
	   
	   Above Jar plugin is no more required, so lets comment it.
	 --> 
	    <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-shade-plugin</artifactId>
			<version>3.4.1</version>
			
			<executions>
				<execution>
					<phase>package</phase>
					<goals>
						<goal>shade</goal>
					</goals>
					<configuration>
						<transformers>
							<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
								<mainClass>org.ashok.AppLauncher</mainClass>
							</transformer>
							
						</transformers>
						<filters>
							<filter>
								<artifact>*:*</artifact>
								<excludes>
									<exclude>META-INF/*.SF</exclude>
									<exclude>META-INF/*.DSA</exclude>
									<exclude>META-INF/*.RSA</exclude>
									
								</excludes>
							</filter>
						</filters>
					</configuration>
					
					
				</execution>
			</executions>
			
		</plugin>
	  
	</plugins>  
	  
  </build>
  
  
</project>